# Development build
version: "3.8"
services:
  backend-api:
    build:
      context: ./backend
      target: development
    restart: unless-stopped
    container_name: backend-api
    ports:
      - "4000:4000"
    volumes:
      - ./backend:/app
    networks:
      - app-network
      - db-network
    depends_on:
      - db

  # frontend-app:
  #   build:
  #     context: ./frontend
  #     target: development
  #   command: sh -c "npm i && npm run dev"
  #   restart: unless-stopped
  #   container_name: frontend-app
  #   volumes:
  #     - ./frontend:/app
  #   ports:
  #     - '3000:3000'
  #   networks: 
  #     - app-network

  db:
    container_name: db-postgres
    image: postgres:15.3
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=db
      - DATABASE_HOST=postgres
    restart: unless-stopped
    ports:
      - 5432:5432
    networks:
      - db-network

  meilisearch:
    container_name: meilisearch
    image: getmeili/meilisearch:latest
    ports:
      - 7700:7700
    depends_on:
      - db
    networks:
      - db-network

  grafana:
      container_name: grafana
      image: grafana/grafana:latest
      restart: unless-stopped
      ports:
        - 3001:3000
      volumes:
        - ./grafana:/var/lib/grafana
      networks:
        - db-network
      depends_on:
        - db

  adminer:
    container_name: db-adminer
    image: adminer
    environment:
      ADMINER_DB: db
      ADMINER_DRIVER: pgsql
      ADMINER_USERNAME: root
      ADMINER_PASSWORD: root
      ADMINER_SERVER: postgres
      ADMINER_AUTOLOGIN: 1
      ADMINER_NAME: Sample DB
      ADMINER_DESIGN: pepa-linha-dark
    restart: unless-stopped
    ports:
      - 8080:8080
    depends_on:
      - db
    networks:
      - db-network

networks:
  app-network:
  db-network:

# docker-compose -f docker-compose.yml up -d --build