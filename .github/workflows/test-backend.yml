name: "Backend CI"

on:
  pull_request:
    branches:
      - "**"
    paths:
      - "backend/**"

jobs:
  backend-ci:
    name: "API Test and deployement"
    runs-on: ubuntu-latest
    container: python:3.11.4-slim

    env:
      POETRY_VERSION: 1.4.2
      CONFIG_NAME: test

      PIP_CACHE_DIR: .cache/pip

      POSTGRES_USER: pguser
      POSTGRES_PASSWORD: pgpassword
      POSTGRES_HOSTNAME: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: db_saline_royale

    defaults:
      run:
        working-directory: backend

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_HOSTNAME: ${{ env.POSTGRES_HOSTNAME }}
          POSTGRES_PORT: ${{ env.POSTGRES_PORT }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        id: pip-cache
        with:
          path: backend/${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          apt-get update
          apt-get -y install libpq-dev gcc
          pip install poetry==${{ env.POETRY_VERSION }}
          poetry export --without-hashes --dev -f requirements.txt -o requirements.txt
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python -m pytest src/tests
